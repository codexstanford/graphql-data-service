version: "3.7"
services:
  prisma:
    image: prismagraphql/prisma:1.34
    restart: unless-stopped
    networks: 
      - backend
    ports:
    - "4466:4466"
    environment:
      PRISMA_CONFIG: |
        port: 4466
        # uncomment the next line and provide the env var PRISMA_MANAGEMENT_API_SECRET=my-secret to activate cluster security
        # managementApiSecret: my-secret
        databases:
          default:
            connector: postgres
            host: postgres
            user: prisma
            password: prisma
            # host: 34.66.96.17
            # user: postgres
            # password: 5sabEOeGrg4IeKOa
            rawAccess: true
            port: 5432
            migrations: true
  postgres:
    image: postgres:10.3
    restart: unless-stopped
    # Uncomment the next two lines to connect to your your database from outside the Docker environment, e.g. using a database GUI like Postico
    ports:
     - "5432:5432"
    environment:
      # POSTGRES_USER: postgres
      # POSTGRES_PASSWORD: 5sabEOeGrg4IeKOa
      POSTGRES_USER: prisma
      POSTGRES_PASSWORD: prisma
      PGDATA: /data/postgres
    networks: 
      - backend
    volumes:
      - postgres:/var/lib/postgresql/data
  pgadmin:
    container_name: "pgadmin_container-stanford"
    image: dpage/pgadmin4
    volumes:
      - pgadmin:/root/.pgadmin
    environment: 
      PGADMIN_DEFAULT_EMAIL: "dba@fabulas.io"
      PGADMIN_DEFAULT_PASSWORD: "dba"
      SERVER_PORT: 5050
    ports:
      - "5050:80"
    networks:
      - backend
    restart: unless-stopped
  # apollo:
  #   build:
  #     context: .
  #     dockerfile: ./Dockerfile
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   restart: unless-stopped
  #   networks:
  #     - backend
  #   ports:
  #     - "4000:4000"
  #   command: ["yarn", "migrate"]
  #   environment:
  #     - RHOST=redis
  #   depends_on:
  #     - redis
  #     - prisma
  memcache:
    image: bitnami/memcached:latest
    networks: 
      - backend
    restart: unless-stopped
    hostname: memcache
    ports:
      - '11211:11211'
  redis:
    image: redis:alpine
    command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    restart: unless-stopped
    networks: 
      - backend
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
    healthcheck:
      test: '[ $$(redis-cli ping) = "PONG" ] || exit 1 ]'
      timeout: 2s
      interval: 5s
      retries: 5
volumes:
  redis:
  postgres:
  pgadmin:

networks:
  backend: 
    driver: bridge