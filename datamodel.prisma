type Person {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  name: [PersonName!]! @relation(link: TABLE, name: "NameOnPerson")
  avatar: [PersonAvatar!]! @relation(link: TABLE, name: "AvatarOnPerson")
  email: [PartyEmail!]! @relation(link: TABLE, name: "EmailOnPerson")
  phone: [PartyPhone!]! @relation(link: TABLE, name: "PhoneOnPerson")
  affiliation: [PersonOrganizationAffiliation!]! @relation(link: TABLE, name: "AffiliationOnPerson")
  personalTitle: String
  account: PartyAccount @relation(link: INLINE) 
  metadata: PersonMetaData! @relation(link: INLINE, name: "MetaDataOnPerson")
}

type PersonMetaData {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  person: Person! @relation(name: "MetaDataOnPerson")
  isDraft: Boolean! @default(value: true)
  isPublic: Boolean! @default(value: false)
  isRejected: Boolean! @default(value: false)
  isUnverified: Boolean! @default(value: true)
  isVerified: Boolean! @default(value: false)
  isApproved: Boolean! @default(value: false)
  isPendingReview: Boolean! @default(value: false)
}

type PersonName {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  firstName: String!
  lastName: String! 
  middleInitial: String
  suffix: String
  fromDate: DateTime!
  throughDate: DateTime
  person: Person @relation( name: "NameOnPerson")
}

type PersonAvatar {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  person: Person! @relation(name: "AvatarOnPerson")
  payload: String! 
  fromDate: DateTime!
  throughDate: DateTime
  isPrimary: Boolean @default(value: false)
  isPublic: Boolean @default(value: true)
}

type PartyPhone {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  payload: String! 
  fromDate: DateTime!
  throughDate: DateTime
  isPrimary: Boolean @default(value: false)
  isPublic: Boolean @default(value: true)
}

type PartyEmail {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  payload: String! 
  fromDate: DateTime!
  throughDate: DateTime
  isPrimary: Boolean @default(value: false)
  isPublic: Boolean @default(value: true)
}

type PartyAccount {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  cognitoId: String! @unique
  handle: String @unique
  name: String!
  email: String
  phone: String
  phone_number_verified: Boolean! @default(value: false)
  email_verified: Boolean! @default(value: false)
  person: Person
  admin: [Organization!]! @relation(name: "AdminsOnOrganization" )
  roles: [PartyRole!]!  @relation(link: TABLE, name: "PartyRoleOnParty")
}

type PartyRole {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  fromDate: DateTime!
  throughDate: DateTime
  roleType: PartyRoleType!
  party: PartyAccount! @relation(name: "PartyRoleOnParty")
  resource: Organization! @relation(name: "PartyRoleOnOrganization")
  
}

type PartyRoleType {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  payload: String! @unique
}

type Organization {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  name: [OrganizationName!]! @relation(name: "NameOnOrganization", onDelete: CASCADE)
  logo: [OrganizationLogo!]! @relation(name: "LogoOnOrganization", onDelete: CASCADE)
  email: [PartyEmail!]! @relation(link: TABLE, name: "EmailOnOrganization")
  phone: [PartyPhone!]! @relation(link: TABLE, name: "PhoneOnOrganization")
  location: [OrganizationLocation!]! @relation(link: TABLE, name: "LocationOnOrganization", onDelete: CASCADE)
  links: [OrganizationLink!]!  @relation(link: TABLE, name: "LinkOnOrganization", onDelete: CASCADE)
  targetMarkets: [OrganizationTargetMarket!]! @relation(link: TABLE, name: "MarketsOnOrganization", onDelete: CASCADE)
  categories: [OrganizationCategory!]! @relation(link: TABLE, name: "CategoryOnOrganization", onDelete: CASCADE)
  metadata: OrganizationMetaData! @relation(link: INLINE, name: "MetaDataOnOrganization", onDelete: CASCADE)
  affiliation: [PersonOrganizationAffiliation!]! @relation(link: TABLE, name: "AffiliationOnOrganization", onDelete: CASCADE)
  context: [OrganizationContext!]!
  yearFounded: DateTime
  description: String
  visible: Boolean
  admins: [PartyAccount!]! @relation(link: TABLE, name: "AdminsOnOrganization")
  parties: [PartyRole!]!  @relation(link: TABLE, name: "PartyRoleOnOrganization")
}


type OrganizationContext {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  payload: String
  fromDate: DateTime!
  throughDate: DateTime
  type: OrganizationContextType!
  metadata: OrganizationContextMetaData @relation(link: INLINE, name: "MetaDataOnOrganizationContext")

}

type OrganizationContextMetaData {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  organizationContext: OrganizationContext! @relation(name: "MetaDataOnOrganizationContext")
  isDraft: Boolean! @default(value: true)
  isPublic: Boolean! @default(value: false)
  isRejected: Boolean! @default(value: false)
  isUnverified: Boolean! @default(value: true)
  isVerified: Boolean! @default(value: false)
  isApproved: Boolean! @default(value: false)
  isPendingReview: Boolean! @default(value: false)
}


enum OrganizationContextType {
  Description
  ShortDescription
  FullDescription
  YearFounded

}

type OrganizationMetaData {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  organization: Organization! @relation(name: "MetaDataOnOrganization")
  isDraft: Boolean! @default(value: true)
  isPublic: Boolean! @default(value: false)
  isRejected: Boolean! @default(value: false)
  isUnverified: Boolean! @default(value: true)
  isVerified: Boolean! @default(value: false)
  isApproved: Boolean! @default(value: false)
  isPendingReview: Boolean! @default(value: false)
}

type OrganizationLogo {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  organization: Organization! @relation(link: INLINE, name: "LogoOnOrganization")
  payload: String! 
  fromDate: DateTime!
  throughDate: DateTime
  isPrimary: Boolean @default(value: false)
  isPublic: Boolean @default(value: true)
  isDefault: Boolean @default(value: true)
}

type OrganizationName {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  payload: String!
  fromDate: DateTime!
  throughDate: DateTime
  organization: Organization! @relation(link: INLINE, name: "NameOnOrganization")
}

type OrganizationCategory {
  id: ID! @unique @id
  payload: String! @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  parent: OrganizationCategory @relation(name: "ParentOnChildCategory")
  children: [OrganizationCategory!]! @relation(name: "ChildrenOnParentCategory")
  organizations: [Organization!]! @relation(name: "CategoryOnOrganization")
}

type OrganizationTargetMarket {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  payload: String! @unique
  organizations: [Organization!]! @relation(name: "MarketsOnOrganization")
}

type OrganizationBusinessModel {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  payload: String! @unique
  organizations: [Organization!]! @relation(name: "OperatingModelOnOrganization")
}


type OrganizationLink {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  type: OrganizationLinkType!
  isHttps: Boolean @default(value: false)
  isPublic: Boolean @default(value: true)
  payload: String!
  fromDate: DateTime!
  throughDate: DateTime
  organization: Organization! @relation(name: "LinkOnOrganization")
}


enum OrganizationLinkType {
  UrlPrivacyPolicy
  UrlSupport
  UrlSales
  UrlTermsOfService
  UrlTwitter
  UrlLinkedIn
  UrlFacebook
  UrlCrunchbase
  UrlAngellist
  UrlWebsite
  EmailSales
  EmailSupport
  Other
}


type OrganizationLocation {
  id: ID! @unique @id
  isPrimary: Boolean @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  organization: Organization! @relation(name: "LocationOnOrganization")
  name: String
  formatted_address: String
  googleId: String
  placeId: String
  geometry: Json
  photos: Json
}


type PersonOrganizationAffiliation {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  organization: Organization! @relation(name: "AffiliationOnOrganization")
  person: Person! @relation(name: "AffiliationOnPerson")
  fromDate: DateTime!
  throughDate: DateTime
  title: String
  role: String
  description: String
  metadata: PersonOrganizationAffiliationMetaData @relation(link: INLINE, name: "MetaDataOnPersonOrganizationAffiliation")
}

type PersonOrganizationAffiliationMetaData {
  id: ID! @unique @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  affiliation: PersonOrganizationAffiliation! @relation(name: "MetaDataOnPersonOrganizationAffiliation")
  isDraft: Boolean! @default(value: true)
  isPublic: Boolean! @default(value: false)
  isRejected: Boolean! @default(value: false)
  isUnverified: Boolean! @default(value: true)
  isVerified: Boolean! @default(value: false)
  isApproved: Boolean! @default(value: false)
  isPendingReview: Boolean! @default(value: false)
}